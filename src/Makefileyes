# Compiler and flags
CC = gcc
CFLAGS = -Wall -Iinclude

# Directories
SRC = src
OBJ = obj
BIN = bin

# Target executable name
TARGET = $(BIN)/myprog

# Source and object files
SRCS = $(wildcard $(SRC)/*.c)
OBJS = $(patsubst $(SRC)/%.c,$(OBJ)/%.o,$(SRCS))

# Default rule
all: $(TARGET)

# Linking rule
$(TARGET): $(OBJS)
	$(CC) $(OBJS) -o $(TARGET)

# Compilation rule
$(OBJ)/%.o: $(SRC)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Clean rule
clean:
	rm -f $(OBJ)/*.o $(TARGET)
cat > src/Makefile << 'EOF'
# src/Makefile - builds objects, static lib and client_static

CC = gcc
AR = ar
RANLIB = ranlib
CFLAGS = -Wall -Wextra -g -I../include
SRCS = main.c mystrfunctions.c myfilefunctions.c

OBJDIR = ../obj
BINDIR = ../bin
LIBDIR = ../lib

OBJS = $(SRCS:%.c=$(OBJDIR)/%.o)
LIB_OBJS = $(filter-out $(OBJDIR)/main.o, $(OBJS))

.PHONY: all clean lib client_static

all: client_static

lib: $(LIBDIR)/libmyutils.a

$(LIBDIR)/libmyutils.a: $(LIB_OBJS)
	mkdir -p $(LIBDIR)
	$(AR) rcs $@ $^
	$(RANLIB) $@

$(BINDIR)/client_static: $(OBJDIR)/main.o $(LIBDIR)/libmyutils.a
	mkdir -p $(BINDIR)
	$(CC) $(CFLAGS) -o $@ $(OBJDIR)/main.o -L$(LIBDIR) -lmyutils

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/client_static $(LIBDIR)/libmyutils.acat > src/Makefile << 'EOF'
# src/Makefile - builds objects, static lib and client_static

CC = gcc
AR = ar
RANLIB = ranlib
CFLAGS = -Wall -Wextra -g -I../include
SRCS = main.c mystrfunctions.c myfilefunctions.c

OBJDIR = ../obj
BINDIR = ../bin
LIBDIR = ../lib

OBJS = $(SRCS:%.c=$(OBJDIR)/%.o)
LIB_OBJS = $(filter-out $(OBJDIR)/main.o, $(OBJS))

.PHONY: all clean lib client_static

all: client_static

lib: $(LIBDIR)/libmyutils.a

$(LIBDIR)/libmyutils.a: $(LIB_OBJS)
	mkdir -p $(LIBDIR)
	$(AR) rcs $@ $^
	$(RANLIB) $@

$(BINDIR)/client_static: $(OBJDIR)/main.o $(LIBDIR)/libmyutils.a
	mkdir -p $(BINDIR)
	$(CC) $(CFLAGS) -o $@ $(OBJDIR)/main.o -L$(LIBDIR) -lmyutils

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/client_static $(LIBDIR)/libmyutils.a
EOF
cat > src/Makefile << 'EOF'
# src/Makefile - builds objects, static lib and client_static

CC = gcc
AR = ar
RANLIB = ranlib
CFLAGS = -Wall -Wextra -g -I../include
SRCS = main.c mystrfunctions.c myfilefunctions.c

OBJDIR = ../obj
BINDIR = ../bin
LIBDIR = ../lib

OBJS = $(SRCS:%.c=$(OBJDIR)/%.o)
LIB_OBJS = $(filter-out $(OBJDIR)/main.o, $(OBJS))

.PHONY: all clean lib client_static

all: client_static

lib: $(LIBDIR)/libmyutils.a

$(LIBDIR)/libmyutils.a: $(LIB_OBJS)
	mkdir -p $(LIBDIR)
	$(AR) rcs $@ $^
	$(RANLIB) $@

$(BINDIR)/client_static: $(OBJDIR)/main.o $(LIBDIR)/libmyutils.a
	mkdir -p $(BINDIR)
	$(CC) $(CFLAGS) -o $@ $(OBJDIR)/main.o -L$(LIBDIR) -lmyutils

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/client_static $(LIBDIR)/libmyutils.a
EOF

CC = gcc
AR = ar
RANLIB = ranlib
CFLAGS = -Wall -Wextra -g -I../include
SRCS = main.c mystrfunctions.c myfilefunctions.c

OBJDIR = ../obj
BINDIR = ../bin
LIBDIR = ../lib

OBJS = $(SRCS:%.c=$(OBJDIR)/%.o)
LIB_OBJS = $(filter-out $(OBJDIR)/main.o, $(OBJS))

.PHONY: all clean lib client_static

all: client_static

lib: $(LIBDIR)/libmyutils.a

$(LIBDIR)/libmyutils.a: $(LIB_OBJS)
	mkdir -p $(LIBDIR)
	$(AR) rcs $@ $^
	$(RANLIB) $@

$(BINDIR)/client_static: $(OBJDIR)/main.o $(LIBDIR)/libmyutils.a
	mkdir -p $(BINDIR)
	$(CC) $(CFLAGS) -o $@ $(OBJDIR)/main.o -L$(LIBDIR) -lmyutils

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/client_static $(LIBDIR)/libmyutils.a
# src/Makefile - recursive, builds objects into ../obj and binary into ../bin

CC = gcc
CFLAGS = -Wall -Wextra -g -I../include
SRCS = main.c mystrfunctions.c myfilefunctions.c
OBJDIR = ../obj
BINDIR = ../bin
OBJS = $(SRCS:%.c=$(OBJDIR)/%.o)

.PHONY: all clean

all: $(BINDIR)/client

$(BINDIR)/client: $(OBJS)
	mkdir -p $(BINDIR)
	$(CC) $(CFLAGS) -o $@ $(OBJS)

$(OBJDIR)/%.o: %.c
	mkdir -p $(OBJDIR)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/client

